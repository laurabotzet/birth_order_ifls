ggplot(cemm, aes(`Birth order`, y = fit, ymax = upper, ymin = lower, colour = `Nr. Siblings`, group = `Nr. Siblings`)) +
geom_pointrange(stat = "identity", position = position_dodge(width = 0.5)) +
geom_line(position = position_dodge(width = 0.5)) +
scale_y_continuous(outcome)
)
}
alldata_birthorder = readRDS("data/alldata_birthorder.rds")
alldata_birthorder = alldata_birthorder %>%
mutate(
# center birthyear
birthyear = byear - mean(byear, na.rm = T),
# Sex (1 = male, 2 = female)
male = factor(sex.x == 1),
male = ifelse(sex.x > 3, NA, male),
# mother_pidlink has to be specified
mother_pidlink = mother_pidlink.x
)
alldata_birthorder = alldata_birthorder %>%
mutate(
# center birthyear
birthyear = byear - mean(byear, na.rm = T),
# Sex (1 = male, 2 = female)
male = factor(sex.x == 1),
male = ifelse(sex.x > 3, NA, male),
# mother_pidlink has to be specified
mother_pidlink = mother_pidlink.x
)
alldata_birthorder = alldata_birthorder %>%
mutate(
# birthorder as factors with levels of 1, 2, 3, 4, 5, 5+
birthorder_uterus_alive_factor = as.character(birthorder_uterus_alive),
birthorder_uterus_alive_factor = ifelse(birthorder_uterus_alive > 5, "5+",
birthorder_uterus_alive_factor),
birthorder_uterus_alive_factor = factor(birthorder_uterus_alive_factor,
levels = c("1","2","3","4","5","5+")),
sibling_count_uterus_alive_factor = as.character(sibling_count_uterus_alive),
sibling_count_uterus_alive_factor = ifelse(sibling_count_uterus_alive > 5, "5+",
sibling_count_uterus_alive_factor),
sibling_count_uterus_alive_factor = factor(sibling_count_uterus_alive_factor,
levels = c("1","2","3","4","5","5+")),
birthorder_uterus_preg_factor = as.character(birthorder_uterus_preg),
birthorder_uterus_preg_factor = ifelse(birthorder_uterus_preg > 5, "5+",
birthorder_uterus_preg_factor),
birthorder_uterus_preg_factor = factor(birthorder_uterus_preg_factor,
levels = c("1","2","3","4","5","5+")),
sibling_count_uterus_preg_factor = as.character(sibling_count_uterus_preg),
sibling_count_uterus_preg_factor = ifelse(sibling_count_uterus_preg > 5, "5+",
sibling_count_uterus_preg_factor),
sibling_count_uterus_preg_factor = factor(sibling_count_uterus_preg_factor,
levels = c("1","2","3","4","5","5+")),
birthorder_genes_factor = as.character(birthorder_genes),
birthorder_genes_factor = ifelse(birthorder_genes >5 , "5+", birthorder_genes_factor),
birthorder_genes_factor = factor(birthorder_genes_factor,
levels = c("1","2","3","4","5","5+")),
sibling_count_genes_factor = as.character(sibling_count_genes),
sibling_count_genes_factor = ifelse(sibling_count_genes >5 , "5+",
sibling_count_genes_factor),
sibling_count_genes_factor = factor(sibling_count_genes_factor,
levels = c("1","2","3","4","5","5+")),
# interaction birthorder * siblingcout for each birthorder
count_birthorder_uterus_alive =
factor(str_replace(as.character(interaction(birthorder_uterus_alive_factor,                                                              sibling_count_uterus_alive_factor)),
"\\.", "/"),
levels =   c("1/1","1/2","2/2", "1/3",  "2/3",
"3/3", "1/4", "2/4", "3/4", "4/4",
"1/5", "2/5", "3/5", "4/5", "5/5",
"1/5+", "2/5+", "3/5+", "4/5+",
"5/5+", "5+/5+")),
count_birthorder_uterus_preg =
factor(str_replace(as.character(interaction(birthorder_uterus_preg_factor,                                                              sibling_count_uterus_preg_factor)),
"\\.", "/"),
levels =   c("1/1","1/2","2/2", "1/3",  "2/3",
"3/3", "1/4", "2/4", "3/4", "4/4",
"1/5", "2/5", "3/5", "4/5", "5/5",
"1/5+", "2/5+", "3/5+", "4/5+",
"5/5+", "5+/5+")),
count_birthorder_genes =
factor(str_replace(as.character(interaction(birthorder_genes_factor,                                                              sibling_count_genes_factor)), "\\.", "/"),
levels =   c("1/1","1/2","2/2", "1/3",  "2/3",
"3/3", "1/4", "2/4", "3/4", "4/4",
"1/5", "2/5", "3/5", "4/5", "5/5",
"1/5+", "2/5+", "3/5+", "4/5+",
"5/5+", "5+/5+")))
m_g_factor_uterus_alive = lm(g_factor ~ birthorder_uterus_alive_factor *
sibling_count_uterus_alive_factor,
data = alldata_birthorder)
m_g_factor_uterus_alive = lm(g_factor ~ count_birthorder_uterus_alive,
data = alldata_birthorder)
summary(m_g_factor_uterus_alive)
plot_birthorder("g_factor")
plot_birthorder(m_g_factor_uterus_alive)
m_g_factor_uterus_preg = lm(g_factor ~ count_birthorder_uterus_preg,
data = alldata_birthorder)
summary(m_g_factor_uterus_preg)
plot_birthorder(m_g_factor_uterus_preg)
library(formr)
library(devtools)
library(haven)
library(tidyr)
library(ggplot2)
library(stringr)
library(GPArotation)
library(lubridate)
library(psych)
library(lavaan)
library(dplyr)
pad_month = function(x) { str_pad(x, width = 2, side = "left", pad = "0")}
### Function to calculate the birthdate out of all available informations for one individual
all_available_info_birth_date = function(byear, bmonth, bday = NULL) {
if(!is.null(bday)) {
bday = paste0("-", bday)
} else {
bday = ""
}
ifelse(is.na(byear), NA,
paste0(byear, "-", bmonth, bday))
# can yield 2016-NA-NA
#           2016-01-NA
#           2016-01-01
#           2016-01
}
##### Function to calculate the birthorder based on the siblings still alive at the time of birth
older_sibs_alive_and_dependent = function(byear, dyear) {
sibs = length(byear)
older_sibs_alive_and_dependent = integer(length=sibs) + 1
for(i in 1:sibs) {
older_sibs = byear <= byear[i] # not using < because of twins
older_sibs[i] = F # minus self
my_sibs = sum(older_sibs,na.rm = T) # minus self
if(my_sibs > 0) {
sib_births = byear[ which(older_sibs) ]
sib_deaths = dyear[ which(older_sibs) ]
my_sibs = my_sibs -
sum(
# sib_births < (byear[i] - 5) | # others born more than 5y earlier than me  # 10 seconds of 17
(sib_deaths <= byear[i]) # died before my birth
,na.rm=T)
older_sibs_alive_and_dependent[i] = my_sibs
}
}
older_sibs_alive_and_dependent
}
### Informations about individuals living in the household in 2014/2015
## All Individuals living in the household
bk_ar1 = read_dta("data/hh14_all_dta/bk_ar1.dta") # Book K, Section ar
# compute father pidlink
bk_ar1 = left_join(bk_ar1, bk_ar1 %>% select(hhid14_9, pid14, pidlink) %>% rename(ar10 = pid14, father_pidlink = pidlink), by = c("hhid14_9", "ar10"))
# compute mother pidlink
bk_ar1 = left_join(bk_ar1, bk_ar1 %>% select(hhid14_9, pid14, pidlink) %>% rename(ar11 = pid14, mother_pidlink = pidlink), by = c("hhid14_9", "ar11"))
### Informations from IFLS wave 5 to link data to earlier waves:
ptrack = read_dta("data/hh14_all_dta/ptrack.dta") # Traking informations
### Pregnancy Informations from mother
## Wave 5 - 2014
w5_pregnancy = read_dta("data/hh14_all_dta/b4_ch1.dta") # Book 4, Section ch
## Wave 4 - 2007
w4_pregnancy = read_dta("data/hh07_all_dta/b4_ch1.dta") # Book 4, Section ch
## Wave 3 - 2000
w3_pregnancy = read_dta("data/hh00_all_dta/b4_ch1.dta") # Book 4, Section ch
## Wave 2 - 1997
w2_pregnancy = read_dta("data/hh97dta/b4_ch1.dta") # Book 4, Section ch
## Wave 1 - 1993
w1_pregnancy = read_dta("data/hh93dta/buk4ch1.dta") # Book 4, Section ch
### Marriage information from mother
## Wave 5 - 2014
w5_marriage= read_dta("data/hh14_all_dta/b4_kw3.dta") # Book 4, Section kw3
## Wave 4 - 2007
w4_marriage = read_dta("data/hh07_all_dta/b4_kw2.dta") # Book 4, Section kw2
## Wave 3 - 2000
w3_marriage = read_dta("data/hh00_all_dta/b4_kw3.dta") # Book 4, Section kw3
## Wave 2 - 1997
w2_marriage = read_dta("data/hh97dta/b4_kw2.dta") # Book 4, Section kw2
## Wave 1 - 1993
w1_marriage = read_dta("data/hh93dta/buk4kw2.dta") # Book 4, Section kw2
## Additional marriage information from mother
# Wave 5 - 2014
w5_marriage_additional = read_dta("data/hh14_all_dta/b4_cov.dta") # Book 4, Section cov
# Wave 4 - 2007
w4_marriage_additional = read_dta("data/hh07_all_dta/b4_cov.dta") # Book 4, Section cov
# Wave 3 - 2000
w3_marriage_additional = read_dta("data/hh00_all_dta/b4_cov.dta") # Book 4, Section cov
# Wave 2 - 1997
w2_marriage_additional = read_dta("data/hh97dta/b4_cov.dta") # Book 4, Section cov
# Wave 1 - 1993
w1_marriage_additional = read_dta("data/hh93dta/bukkar2.dta") # Book K, Section ar, household roaster
### IQ Information
ek_ek2 = read_dta("data/hh14_all_dta/ek_ek2.dta") # Book ek2
# additional information (counting backwards, adaptive testing) for adults
b3b_cob = read_dta("data/hh14_all_dta/b3b_cob.dta") # Book 3b, Section cob
b3b_co1 = read_dta("data/hh14_all_dta/b3b_co1.dta") # Book 3b, Section co1
### Personality Information (only for adults)
b3b_psn = read_dta("data/hh14_all_dta/b3b_psn.dta") # Book 3b, Section psn
### Risk taking
b3a_si = read_dta("data/hh14_all_dta/b3a_si.dta") # Book 3b, Section si
## Select data
w5_pregnancy = w5_pregnancy %>% select(pidlink, ch06, ch08, ch09day, ch09mth, ch09yr, ch25)
w4_pregnancy = w4_pregnancy %>% select(pidlink, ch06, ch08, ch09day, ch09mth, ch09yr, ch25)
w3_pregnancy = w3_pregnancy %>% select(pidlink, ch06, ch08, ch09day, ch09mth, ch09yr, ch25)
w2_pregnancy = w2_pregnancy %>% select(pidlink, ch06, ch08, ch09day, ch09mth, ch09yr, ch25)
w1_pregnancy = w1_pregnancy %>% select(pidlink, ch06, ch08, ch09day, ch09mth, ch09yr, ch25)
# In the first wave the year is named wrong
w1_pregnancy = w1_pregnancy %>%
filter(ch09yr <=93)
w1_pregnancy$ch09yr = as.numeric(str_c("19", w1_pregnancy$ch09yr))
## Combine data
pregnancy = bind_rows(w1_pregnancy, w2_pregnancy, w3_pregnancy, w4_pregnancy, w5_pregnancy)
length(unique(pregnancy$pidlink))
## Rename Variables
pregnancy = pregnancy %>% rename(lifebirths = ch06, gender = ch08, birth_day = ch09day, birth_month = ch09mth, birth_year = ch09yr, mother_pidlink = pidlink, alive = ch25) # pregnancy$lifebirths values: 1 = still pregnant, 2 = livebirth, 3 = still birth, 4 = misscarriage
n_missing(pregnancy$mother_pidlink)
## Set values as NA that are missing
pregnancy$birth_day[ pregnancy$birth_day>31] = NA
pregnancy$birth_month[ pregnancy$birth_month>12] = NA
pregnancy$birth_year[ pregnancy$birth_year>2016] = NA
pregnancy$birth_day[ is.nan(pregnancy$birth_day) ] = NA
pregnancy$birth_month[ is.nan(pregnancy$birth_month) ] = NA
pregnancy$birth_year[ is.nan(pregnancy$birth_year)] = NA
pregnancy = pregnancy %>%
mutate(birthdate = all_available_info_birth_date(birth_year, birth_month, birth_day),
mother_birthdate = str_c(mother_pidlink, "-", birthdate))
##remove all with missing birthdate/miscarriage date
pregnancy = pregnancy %>%
filter(!is.na(birthdate))
pregnancy_alive = pregnancy %>%
filter(lifebirths ==2)
### Remove all families with multiple births:
## Mark multpile births
pregnancy = pregnancy %>%
mutate(multiple_birth = ifelse(duplicated(mother_birthdate), 1, 0))
## All women that ever had multiple births
twinmothers = pregnancy %>%
filter(multiple_birth == 1)
length(unique(twinmothers$mother_pidlink)) ## number of families that have to be excluded due to multiple births
pregnancy = pregnancy %>%
filter(!(mother_pidlink %in% twinmothers$mother_pidlink))
### Remove all families with multiple births:
## Mark multpile births
pregnancy_alive = pregnancy_alive %>%
mutate(multiple_birth = ifelse(duplicated(mother_birthdate), 1, 0))
## All women that ever had multiple births
twinmothers_alive = pregnancy_alive %>%
filter(multiple_birth == 1)
length(unique(twinmothers_alive$mother_pidlink)) ## number of families that have to be excluded due to multiple births
pregnancy_alive = pregnancy_alive %>%
filter(!(mother_pidlink %in% twinmothers$mother_pidlink))
### Birthorder calculations
## Biological Uterus Birthorder calculations with all pregnancies:
pregnancy1 = pregnancy %>%
group_by(mother_pidlink) %>%
mutate(birthorder_uterus_preg = min_rank(birthdate),
sibling_count_uterus_preg = sum(!is.na(birthdate)))
## Biological Uterus Birthorder calculations with all births:
pregnancy2 = pregnancy %>%
filter(lifebirths == 2) %>%
group_by(mother_pidlink) %>%
mutate(birthorder_uterus_alive = min_rank(birthdate),
sibling_count_uterus_alive = sum(!is.na(birthdate))) %>%
ungroup()
pregnancy2 = pregnancy2 %>% select(mother_birthdate, birthorder_uterus_alive, sibling_count_uterus_alive)
### 3040 individuals are removed because of death before/during birth
### Combine birthorder data
pregnancy = left_join(pregnancy1, pregnancy2, by="mother_birthdate")
pregnancy$month = paste0(pregnancy$birth_year,"-", ifelse(is.na(pregnancy$birth_month), "01", pad_month(pregnancy$birth_month)))
n_missing(pregnancy$mother_pidlink)
### Graphs
## Biological Birthorder - Uterus_Pregnancies
qplot(pregnancy$birthorder_uterus_preg)
ggplot(pregnancy, aes(x=sibling_count_uterus_preg, y=birthorder_uterus_preg)) + geom_jitter()
## Biological Birthorder - Uterus_Births
qplot(pregnancy$birthorder_uterus_alive)
ggplot(pregnancy, aes(x=sibling_count_uterus_alive, y=birthorder_uterus_alive)) + geom_jitter()
## Bio: Uterus_preg vs. Uterus_Births
ggplot(pregnancy, aes(x=birthorder_uterus_preg, y=birthorder_uterus_alive)) + geom_jitter()
# The birth_order_alive is always lower, which makes sense, becaus not live births (miscarriage, still births are excluded)
## Select marriage data
w5_marriage = w5_marriage %>% select(pidlink, kw10mth, kw10yr, kw18mth, kw18yr, kw11, kw19)
w4_marriage = w4_marriage %>% select(pidlink, kw10mth, kw10yr, kw18mth, kw18yr, kw11, kw19)
w3_marriage = w3_marriage %>% select(pidlink, kw10mth, kw10yr, kw18mth, kw18yr, kw11, kw19)
w2_marriage = w2_marriage %>% select(pidlink, kw10mth, kw10yr, kw18mth, kw18yr, kw11, kw19)
w1_marriage = w1_marriage %>% select(pidlink, kw05a, kw05b, kw13a, kw13b, kw06, kw14age)
# In the first wave the year is named wrong
w1_marriage = w1_marriage %>%
mutate(kw05a = ifelse(kw05a <= 93, as.numeric(str_c("19", w1_marriage$kw05a)), kw05a),
kw13a = ifelse(kw13a <=93 , as.numeric(str_c("19", w1_marriage$kw13a)), kw13a))
# And the column names are wrong...
w1_marriage = w1_marriage %>% rename(kw10mth = kw05b, kw10yr = kw05a, kw18mth = kw13b, kw18yr = kw13a, kw11 = kw06, kw19 = kw14age)
## Select additional marriage information (age of respondent)
w5_marriage_additional = w5_marriage_additional %>% select(pidlink, age, dob_yr)
w4_marriage_additional = w4_marriage_additional %>% select(pidlink, age, dob_yr)
w3_marriage_additional = w3_marriage_additional %>% select(pidlink, age, dob_yr)
w2_marriage_additional = w2_marriage_additional %>% select(pidlink, age, dob_yr)
w1_marriage_additional = w1_marriage_additional %>% select(pidlink, ar09yr, ar08yr)
# In the first wave the year is named wrong
w1_marriage_additional = w1_marriage_additional %>%
mutate(ar08yr = ifelse(ar08yr <= 93,
as.numeric(str_c("19", w1_marriage_additional$ar08yr)),
ar08yr))
# And the column names are wrong...
w1_marriage_additional = w1_marriage_additional %>% rename(age = ar09yr, dob_yr = ar08yr)
## Combine marriage information and additional marriage information:
w1_marriage = left_join(w1_marriage, w1_marriage_additional, by = "pidlink") %>%
mutate(wave = as.numeric("1993"))
w2_marriage = left_join(w2_marriage, w2_marriage_additional, by = "pidlink") %>%
mutate(wave = as.numeric("1997"))
w3_marriage = left_join(w3_marriage, w3_marriage_additional, by = "pidlink")  %>%
mutate(wave = as.numeric("2000"))
w4_marriage = left_join(w4_marriage, w4_marriage_additional, by = "pidlink") %>%
mutate(wave = as.numeric("2007"))
w5_marriage = left_join(w5_marriage, w5_marriage_additional, by = "pidlink") %>%
mutate(wave = as.numeric("2014"))
## Combine marriage informations
marriage = bind_rows(w1_marriage, w2_marriage, w3_marriage, w4_marriage, w5_marriage)
# Rename columns
marriage = marriage %>% rename(start_year = kw10yr, start_month = kw10mth, end_year = kw18yr, end_month = kw18mth, start_age = kw11, end_age = kw19, birth_year = dob_yr, birth_age = age)
# Set values as NA that are missing
marriage$start_year[ marriage$start_year<1900] = NA
marriage$start_year[ marriage$start_year>2016] = NA
marriage$start_year[ is.nan(marriage$start_year)] = NA
marriage$end_year[ marriage$end_year<1900] = NA
marriage$end_year[ marriage$end_year>2016] = NA
marriage$end_year[ is.nan(marriage$end_year)] = NA
marriage$start_month [marriage$start_month>12] = NA
marriage$start_month [is.nan(marriage$start_month)] = NA
marriage$end_month [marriage$end_month>12] = NA
marriage$end_month [is.nan(marriage$end_month)] = NA
marriage$start_age [marriage$start_age > 97] = NA
marriage$start_age [is.nan(marriage$start_age)] = NA
marriage$end_age [marriage$end_age > 97] = NA
marriage$end_age [is.nan(marriage$end_age)] = NA
marriage$birth_year[ marriage$birth_year<1900] = NA
marriage$birth_year[ marriage$birth_year>2016] = NA
marriage$birth_year[ is.nan(marriage$birth_year)] = NA
marriage$birth_age [marriage$birth_age > 97] = NA
marriage$birth_age [is.nan(marriage$birth_age)] = NA
## Reconstruct marriage start year and end year for marriages with missing year
marriage = marriage %>%
mutate(birth_year = ifelse(is.na(birth_year), wave - birth_age, birth_year),
start_year = ifelse(is.na(start_year), birth_year + start_age, start_year),
end_year = ifelse(is.na(end_year), birth_year + end_age, end_year))
marriage = marriage %>% arrange(pidlink, start_year, start_month, start_age, end_year, end_month, end_age)
marriage = marriage %>% filter(!duplicated(cbind(pidlink, start_year, start_month)) | !is.na(start_year) | is.na(start_month)) # nobody gets married twice on the same day, right? so these are dupes.
## Calculate date for beginning of marriage:
marriage = marriage %>%
ungroup() %>%
mutate(start_string = str_c(start_year, "-", ifelse(is.na(start_month), "01",
pad_month(start_month)), "-01"),
end_string = str_c(end_year, "-", ifelse(is.na(end_month), "12", pad_month(end_month)), "-01"),
start = ymd(start_string),
end = ymd(end_string) + months(1) - days(1))
# marriage$start_string[!is.na(marriage$start_string) & is.na(marriage$start) ]
# marriage$end_string[!is.na(marriage$end_string) & is.na(marriage$end) ]
#
qplot(marriage$start)
qplot(marriage$end)
## Count number of marriages
marriage = marriage %>%
arrange(pidlink, start, end) %>%
group_by(pidlink) %>%
mutate(number_marriages = n(),
order_marriage = row_number(),
marriage_id = paste0(pidlink, "_", as.character(order_marriage), "_",
as.character(start), "/",as.character(end)))
dupes = unique(marriage$marriage_id[duplicated(marriage$marriage_id)])
## Graphic analysis
marriage %>% ggplot(aes(number_marriages, order_marriage)) + geom_jitter(width=0.1)
## Problem: What do i do with still ongoing marriages? How do i deal with marriages with missing end, but ther are other marriages afterwards (can i use that start date as end date? and if yes --> how?!?)
table(is.na(marriage$start))
table(is.na(marriage$end))
### Marriage Timeline
minimum_start = min(ymd(str_c(pregnancy$month, "-01")), na.rm = T)
maximum_end = max(ymd(str_c(pregnancy$month, "-01")), na.rm = T)
marriage_timeline = marriage %>%
mutate(implied_start = as.Date(ifelse(is.na(start), minimum_start , start),
origin="1970-01-01"),
implied_end = as.Date(ifelse(is.na(end), maximum_end , end),
origin="1970-01-01")) %>%
filter(implied_start < implied_end)
marriage_timeline = marriage_timeline %>%
rowwise() %>%
do(data.frame(
marriage_id=.$marriage_id,
mother_pidlink = .$pidlink,
order_marriage = .$order_marriage,
start = .$start,
end = .$end,
month = seq(.$implied_start,.$implied_end, by="1 month") ))
# no duplicate mother_id - month combinations (no two marriages at the same time)
marriage_timeline = marriage_timeline %>%
arrange(mother_pidlink, start, end) %>%
distinct(mother_pidlink, month, .keep_all = TRUE)
marriage_timeline$month = stringr::str_sub(as.character(marriage_timeline$month),1,7)
# How many IDs from the pregnancy file match the marriage file?
length(intersect(pregnancy$mother_pidlink, marriage_timeline$mother_pidlink))
pregnancy = pregnancy %>% left_join(marriage_timeline, by = c("mother_pidlink", "month"))
# rm(marriage_timeline)
### Gene birthorder is calculated by grouping individuals together, for whom we know both the mother and her marriage history and making a rank list
pregnancy_save = pregnancy
pregnancy = pregnancy %>%
group_by(marriage_id) %>%
mutate(birthorder_genes = min_rank(birthdate),
birthorder_genes = ifelse(is.na(marriage_id), NA, birthorder_genes),
sibling_count_genes = ifelse(is.na(marriage_id), NA, sum(!is.na(marriage_id))))
pregnancy = pregnancy %>% filter(!is.na(birthorder_uterus_preg))
ggplot(pregnancy, aes(x=sibling_count_genes, y=birthorder_genes)) + geom_jitter()
## Plot uterus birth order vs. gene birthorder
ggplot(pregnancy, aes(x=birthorder_uterus_alive, y=birthorder_genes)) + geom_jitter()
### Individuals
individuals = bk_ar1 %>% select(hhid14_9, pidlink, father_pidlink, mother_pidlink, ar01a, ar02b, ar10, ar11, ar07, ar08day, ar08mth, ar08yr, ar09, ar18eyr, ar18emth)
#Rename variables to make it easier
individuals = rename(individuals, relation_to_HH_head = ar02b, fatherID = ar10, motherID = ar11, sex = ar07, age = ar09, status = ar01a, death_yr = ar18eyr, death_month = ar18emth)
# Remove duplicats (some people are mentioned in two households, e.g. because they moved in the last 12 months)
individuals = individuals %>% distinct(pidlink, .keep_all = TRUE)
individuals_unchanged = individuals
## people whose parents can not be identified have to be marked as NA:
individuals$fatherID[ individuals$fatherID>50] = NA
individuals$motherID[ individuals$motherID>50] = NA
## Create date of birth
#Set all variables missing that have not been reported:
individuals$ar08day[ individuals$ar08day>31] = NA
individuals$ar08mth[ individuals$ar08mth>12] = NA
individuals$ar08yr[ individuals$ar08yr>2016] = NA
individuals$ar08day[ is.nan(individuals$ar08day) ] = NA
individuals$ar08mth[ is.nan(individuals$ar08mth) ] = NA
individuals$ar08yr[ is.nan(individuals$ar08yr)] = NA
individuals$death_month[ individuals$death_month>12] = NA
individuals$death_yr[ individuals$death_yr>2016] = NA
individuals$death_month[ is.nan(individuals$death_month) ] = NA
individuals$death_yr[ is.nan(individuals$death_yr)] = NA
## Create variable that contains pidlink of mother and birthdate of child:
individuals = individuals %>%
mutate(mother_birthdate = str_c(mother_pidlink, "-",
all_available_info_birth_date(ar08yr, ar08mth, ar08day))) # mother_pidlink-YYYY-MM; is NA if birth_year is missing
##Remove all with missing mother_birthdate
individuals = individuals %>%
filter(!is.na(mother_birthdate))
### Remove all families with multiple births:
## Mark multpile births
individuals = individuals %>%
mutate(multiple_birth = ifelse(duplicated(mother_birthdate), 1, 0))
## All women that ever had multiple births
twinmothers_individual = individuals %>%
filter(multiple_birth == 1)
length(unique(twinmothers_individual$mother_pidlink)) # number of families that have to be excluded due to multiple birth
individuals = individuals %>%
filter(!(mother_pidlink %in% twinmothers_individual$mother_pidlink))
## Combine informations from pregnancy history and individual files
alldata_pregnancy = left_join(pregnancy, individuals, by = "mother_birthdate")
### IQ Informations
##ek2 (>14yrs)
iq2.1 = ek_ek2 %>% select(hhid14_9, pidlink, age, sex, ektype, resptype, result, reason, ek1_ans, ek2_ans, ek3_ans, ek4_ans, ek5_ans, ek6_ans, ek7_ans, ek8_ans, ek9_ans, ek10_ans, ek11_ans, ek12_ans, ek13_ans, ek14_ans, ek15_ans, ek16_ans, ek17_ans, ek18_ans, ek19_ans, ek20_ans, ek21_ans, ek22_ans)
##additional informations for adults: counting backwards
iq2.2 = b3b_co1 %>% select(hhid14_9, pidlink, co04a, co04b, co04c, co04d, co04e, co07count, co10count)
##additional informations for adults: adaptive number test
iq2.3 = b3b_cob %>% select(hhid14_9, pidlink, w_abil, cob18, cob19b)
## put all the informations for participants >= 15 together
iq2 = full_join(iq2.1, iq2.2, by = "pidlink")
iq2 = full_join(iq2, iq2.3, by = "pidlink")
iq = iq2
iq <- plyr::rename(iq, c("age"="IQage"))
### calculate iq scores
##Raven Test
answered_raven_items = iq %>% select(ek1_ans:ek6_ans, ek11_ans, ek12_ans)
psych::alpha(data.frame(answered_raven_items))
iq$raven = rowMeans( answered_raven_items, na.rm = T)
iq$raven[! iq$result %in% 1:2] = NA
qplot(iq$raven)
##Math Test
answered_math_items = iq %>% select(ek18_ans:ek22_ans)
psych::alpha(data.frame(answered_math_items))
iq$math = rowMeans( answered_math_items, na.rm = T)
iq$math[! iq$result %in% 1:2] = NA
qplot(iq$math)
##Counting Items
# Create Right/Wrong Scores for the counting items
iq$co04aright = as.numeric(iq$co04a == 93)
iq$co04bright = as.numeric(iq$co04b == iq$co04a-7)
iq$co04cright = as.numeric(iq$co04c == iq$co04b-7)
iq$co04dright = as.numeric(iq$co04d == iq$co04c-7)
iq$co04eright = as.numeric(iq$co04e == iq$co04d-7)
answered_counting_items = iq %>% select(co04aright:co04eright)
psych::alpha(data.frame(answered_counting_items))
iq$count_backwards = rowSums( answered_counting_items, na.rm = T) / 5
qplot(iq$count_backwards)
## Word Memory
iq$words_immediate = iq$co07count
iq$words_delayed = iq$co10count
qplot(iq$words_immediate, iq$words_delayed, geom = "jitter")
answered_word_items = iq %>% select(co07count,co10count)
psych::alpha(data.frame(answered_word_items))
iq$words_remembered_avg = rowMeans( answered_word_items, na.rm = T)
qplot(iq$words_remembered_avg)
##Adaptive Numbering
iq$adaptive_numbering = iq$w_abil
#iq$drew_pentagons = as.numeric(iq$cob19b == 1)
#iq$number_of_animals = iq$cob18
## Correlation of all Iq-Tests
round(cor(iq %>% select(raven, math, count_backwards, words_immediate, words_delayed, adaptive_numbering), use = "pairwise.complete.obs"), 2)
##Missingness_Patterns
formr::missingness_patterns(iq %>% select(raven, math, count_backwards, words_immediate, words_delayed, adaptive_numbering))
iq$words_delayed = iq$words_delayed/10
iq$words_immediate = iq$words_immediate/10
iq$adaptive_numbering = iq$adaptive_numbering/100
fa.parallel(iq %>% select(raven, math, count_backwards, words_delayed, adaptive_numbering) %>% data.frame())
fa(iq %>% select(raven, math, count_backwards, words_delayed, adaptive_numbering) %>% data.frame(), nfactors = 1)
om_results = omega(iq %>% select(raven, math, count_backwards, words_delayed, adaptive_numbering) %>% data.frame(), nfactors = 1, sl = F)
om_results
omega.diagram(om_results)
m_g_factor_genes = lm(g_factor ~ count_birthorder_genes,
data = alldata_birthorder)
"g_factor =~ raven + math + count_backwards +  words_delayed+ adaptive_numbering" %>%
cfa(missing = "fiml", data = iq, std.lv = T, std.ov = T) -> cfa_g
summary(cfa_g)
commonalities <- inspect(cfa_g , "parameter.estimates")
